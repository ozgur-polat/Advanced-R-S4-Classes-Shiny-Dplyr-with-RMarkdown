vegetable_oils = as.numeric(protein$Vegetable.Oils[row]),
vegetables = as.numeric(protein$Vegetables[row]),
miscellaneous = as.numeric(protein$Miscellaneous[row]),
obesity = as.numeric(protein$Obesity[row]),
undernourished = as.numeric(protein$Undernourished[row]),
confirmed = as.numeric(protein$Confirmed[row]),
deaths = as.numeric(protein$Deaths[row]),
recovered = as.numeric(protein$Recovered[row]),
active = as.numeric(protein$Active[row]),
population = as.numeric(protein$Population[row]))
}
#As per seen below the object type is S4
typeof(countries$Poland)
#Here the S4 object automatically invokes the defined method
countries$Poland
#Here the object attribute is called
countries$Turkey@fruits
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(dplyr)
library(tidyverse)
library(DT)
library(shinythemes)
library(knitr)
library(flexdashboard)
library(plotly)
library(tidyverse)
library(dplyr)
library(ggplot2)
protein <- read.csv("protein.csv")
df <- select(protein, -c(Unit..all.except.Population.))
protein <- read.csv("protein.csv",sep = ";")
df <- select(protein, -c(Unit..all.except.Population.))
cases <- df %>%
select(Country,Confirmed , Active, Recovered,Deaths,Population) %>%
mutate(
'Number of Confirmed' = Population * Confirmed,
"Number of Active" = Population * Active,
'Number of Recovered' = Population * Recovered,
'Number of Deaths' = Population * Deaths)
rm(protein)
rm(df)
library(readr)
protein <- read_delim("~/R/advancedr/protein.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(protein)
protein$Confirmed = as.numeric(protein$Confirmed)
df <- select(protein, -c(Unit..all.except.Population.))
colnames(protein)
df <- select(protein, -c(Unit (all except Population)))
cases <- protein %>%
select(Country,Confirmed , Active, Recovered,Deaths,Population) %>%
mutate(
'Number of Confirmed' = Population * Confirmed,
"Number of Active" = Population * Active,
'Number of Recovered' = Population * Recovered,
'Number of Deaths' = Population * Deaths)
cases$Grp <- (ifelse(between(cases$`Number of Deaths`,50000,110000),"A",
ifelse(between(cases$`Number of Deaths`,10000,49999),"B"(cases$`Number of Deaths`)< 9999,
"D")))
cases$Grp <- (ifelse(between(cases$`Number of Deaths`,50000,110000),"A",
ifelse(between(cases$`Number of Deaths`,10000,49999),"B",(cases$`Number of Deaths`)< 9999,
"D")))
cases$Grp <- (ifelse(between(cases$`Number of Deaths`,50000,110000),"A",
ifelse(between(cases$`Number of Deaths`,10000,49999),"B"),(cases$`Number of Deaths`)< 9999,
"D"))
cases$Grp <- (ifelse(between(cases$`Number of Deaths`,50000,110000),"A",
ifelse(between(cases$`Number of Deaths`,10000,49999),"B",between(cases$`Number of Deaths`,9999,0),
"C")))
cases$Grp <- (ifelse(between(cases$`Number of Deaths`,50000,110000),"A",
ifelse(between(cases$`Number of Deaths`,10000,49999),"B",between(cases$`Number of Deaths`,9999,0)
"C")))
cases$Grp <- if(between(cases$`Number of Deaths`,"50000","110000"))
{"A"}else{
if(between(cases$`Number of Deaths`,"10000","49999")){"B"}}else{"C"}
runApp('E:/DS Spring 2020/ADvanced R/10/app')
country_statistics <- function(c_name,food){
#c variable i yukaridaki classtan 'countries@Poland' gibi alinip @ isareti ile attributelari alinabilir
return(countries$c_nam@food)
}
country_statistics(Portugal,fruits)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(dplyr)
library(tidyverse)
library(DT)
library(shinythemes)
library(knitr)
library(flexdashboard)
library(plotly)
library(tidyverse)
library(dplyr)
library(ggplot2)
protein <- read.csv2("data/protein.csv", header=TRUE, sep=";")
head(protein)
# OWN CLASS
country <- setClass("country",
slots = list(cname = "character",
alcholic_beverages = "numeric",
animal_products = "numeric",
animal_fats = "numeric",
aquatic_products = "numeric",
cereals = "numeric",
eggs = "numeric",
fish = "numeric",
fruits = "numeric",
meat = "numeric",
milk = "numeric",
offals = "numeric",
oilcrops = "numeric",
pulses = "numeric",
spices = "numeric",
starchy = "numeric",
stimulants = "numeric",
sugar_crops = "numeric",
sugar_and_sweeteners = "numeric",
treenuts = "numeric",
vegetal = "numeric",
vegetable_oils = "numeric",
vegetables = "numeric",
miscellaneous = "numeric",
obesity = "numeric",
undernourished = "numeric",
confirmed = "numeric",
deaths = "numeric",
recovered = "numeric",
active = "numeric",
population = "numeric"))
#CLASS METHOD
setMethod(f = "show",
signature = "country",
definition = function(object) {
cat(object@cname, "\n")
cat("Number of Confirmed Cases:", object@confirmed*object@population, "\n")
cat("Number of Active Cases:", object@active*object@population, "\n")
cat("Number of Recovered Cases:", object@recovered*object@population, "\n")
}
)
#Creation of an empty list
countries <- list()
#EACH ROW IN THE DATASET WILL BECOME A COUNTRY OBJECT
#iterating over the dataset
for (row in 1:nrow(protein)) {
#creation of country objects for each row and appending them to the empty list initialized above
countries[as.character(protein$Country[row])] <- country(cname = as.character(protein$Country[row]),
alcholic_beverages = as.numeric(protein$Alcoholic.Beverages[row]),
animal_products = as.numeric(protein$Animal.Products[row]),
animal_fats = as.numeric(protein$Animal.fats[row]),
aquatic_products = as.numeric(protein$Aquatic.Products..Other[row]),
cereals = as.numeric(protein$Cereals...Excluding.Beer[row]),
eggs = as.numeric(protein$Eggs[row]),
fish = as.numeric(protein$Fish..Seafood[row]),
fruits = as.numeric(protein$Fruits...Excluding.Wine[row]),
meat = as.numeric(protein$Meat[row]),
milk = as.numeric(protein$Milk...Excluding.Butter[row]),
offals = as.numeric(protein$Offals[row]),
oilcrops = as.numeric(protein$Oilcrops[row]),
pulses = as.numeric(protein$Pulses[row]),
spices = as.numeric(protein$Spices[row]),
starchy = as.numeric(protein$Starchy.Roots[row]),
stimulants = as.numeric(protein$Stimulants[row]),
sugar_crops = as.numeric(protein$Sugar.Crops[row]),
sugar_and_sweeteners = as.numeric(protein$Sugar...Sweeteners[row]),
treenuts = as.numeric(protein$Treenuts[row]),
vegetal = as.numeric(protein$Vegetal.Products[row]),
vegetable_oils = as.numeric(protein$Vegetable.Oils[row]),
vegetables = as.numeric(protein$Vegetables[row]),
miscellaneous = as.numeric(protein$Miscellaneous[row]),
obesity = as.numeric(protein$Obesity[row]),
undernourished = as.numeric(protein$Undernourished[row]),
confirmed = as.numeric(protein$Confirmed[row]),
deaths = as.numeric(protein$Deaths[row]),
recovered = as.numeric(protein$Recovered[row]),
active = as.numeric(protein$Active[row]),
population = as.numeric(protein$Population[row]))
}
#As per seen below the object type is S4
typeof(countries$Poland)
#Here the S4 object automatically invokes the defined method
countries$Poland
#Here the object attribute is called
countries$Turkey@fruits
protein %>%
transmute("Number of Confirmed" = Population * Confirmed,
"Number of Active" = Population * Active,
"Number of Recovered" = Population * Recovered,
"Number of Deaths" = Population * Deaths)
#Creating group for basic stats
char_to_num <- c()
protein$Confirmed = as.integer(protein$Confirmed)
View(protein)
View(protein)
protein$Confirmed = as.double(protein$Confirmed)
protein <- read.csv2("data/protein.csv", header=TRUE, sep=";")
head(protein)
protein <- read.delim("data/protein.csv", header=TRUE, sep=";",col_types = cols(Confirmed = col_number(),Recovered = col_number(),Deaths = col_number(),Active = col_number()))
protein <- read_delim("data/protein.csv", header=TRUE, sep=";",col_types = cols(Confirmed = col_number(),Recovered = col_number(),Deaths = col_number(),Active = col_number()))
protein <- read_delim("data/protein.csv",  sep=";",col_types = cols(Confirmed = col_number(),Recovered = col_number(),Deaths = col_number(),Active = col_number()))
protein <- read_delim("data/protein.csv",  ";",col_types = cols(Confirmed = col_number(),Recovered = col_number(),Deaths = col_number(),Active = col_number()))
head(protein)
#Creating group for basic stats
char_to_num <- c()
protein$Confirmed = as.double(protein$Confirmed)
protein %>%
transmute("Number of Confirmed" = Population * Confirmed,
"Number of Active" = Population * Active,
"Number of Recovered" = Population * Recovered,
"Number of Deaths" = Population * Deaths)
protein %>% select()
cases$Grp <- (ifelse(between(cases$`Number of Deaths`,50000,110000),"A",
ifelse(between(cases$`Number of Deaths`,10000,49999),"B",
"D")))
View(protein)
View(protein)
# OWN CLASS
country <- setClass("country",
slots = list(cname = "character",
alcholic_beverages = "numeric",
animal_products = "numeric",
animal_fats = "numeric",
aquatic_products = "numeric",
cereals = "numeric",
eggs = "numeric",
fish = "numeric",
fruits = "numeric",
meat = "numeric",
milk = "numeric",
offals = "numeric",
oilcrops = "numeric",
pulses = "numeric",
spices = "numeric",
starchy = "numeric",
stimulants = "numeric",
sugar_crops = "numeric",
sugar_and_sweeteners = "numeric",
treenuts = "numeric",
vegetal = "numeric",
vegetable_oils = "numeric",
vegetables = "numeric",
miscellaneous = "numeric",
obesity = "numeric",
undernourished = "numeric",
confirmed = "numeric",
deaths = "numeric",
recovered = "numeric",
active = "numeric",
population = "numeric"))
#CLASS METHOD
setMethod(f = "show",
signature = "country",
definition = function(object) {
cat(object@cname, "\n")
cat("Number of Confirmed Cases:", object@confirmed*object@population, "\n")
cat("Number of Active Cases:", object@active*object@population, "\n")
cat("Number of Recovered Cases:", object@recovered*object@population, "\n")
}
)
#Creation of an empty list
countries <- list()
#EACH ROW IN THE DATASET WILL BECOME A COUNTRY OBJECT
#iterating over the dataset
for (row in 1:nrow(protein)) {
#creation of country objects for each row and appending them to the empty list initialized above
countries[as.character(protein$Country[row])] <- country(cname = as.character(protein$Country[row]),
alcholic_beverages = as.numeric(protein$Alcoholic.Beverages[row]),
animal_products = as.numeric(protein$Animal.Products[row]),
animal_fats = as.numeric(protein$Animal.fats[row]),
aquatic_products = as.numeric(protein$Aquatic.Products..Other[row]),
cereals = as.numeric(protein$Cereals...Excluding.Beer[row]),
eggs = as.numeric(protein$Eggs[row]),
fish = as.numeric(protein$Fish..Seafood[row]),
fruits = as.numeric(protein$Fruits...Excluding.Wine[row]),
meat = as.numeric(protein$Meat[row]),
milk = as.numeric(protein$Milk...Excluding.Butter[row]),
offals = as.numeric(protein$Offals[row]),
oilcrops = as.numeric(protein$Oilcrops[row]),
pulses = as.numeric(protein$Pulses[row]),
spices = as.numeric(protein$Spices[row]),
starchy = as.numeric(protein$Starchy.Roots[row]),
stimulants = as.numeric(protein$Stimulants[row]),
sugar_crops = as.numeric(protein$Sugar.Crops[row]),
sugar_and_sweeteners = as.numeric(protein$Sugar...Sweeteners[row]),
treenuts = as.numeric(protein$Treenuts[row]),
vegetal = as.numeric(protein$Vegetal.Products[row]),
vegetable_oils = as.numeric(protein$Vegetable.Oils[row]),
vegetables = as.numeric(protein$Vegetables[row]),
miscellaneous = as.numeric(protein$Miscellaneous[row]),
obesity = as.numeric(protein$Obesity[row]),
undernourished = as.numeric(protein$Undernourished[row]),
confirmed = as.numeric(protein$Confirmed[row]),
deaths = as.numeric(protein$Deaths[row]),
recovered = as.numeric(protein$Recovered[row]),
active = as.numeric(protein$Active[row]),
population = as.numeric(protein$Population[row]))
}
#As per seen below the object type is S4
typeof(countries$Poland)
#Here the S4 object automatically invokes the defined method
countries$Poland
#Here the object attribute is called
countries$Turkey@fruits
protein <- read.csv2("data/protein.csv", header=TRUE, sep=";",na.rm = TRUE)
protein <- read.csv2("data/protein.csv", header=TRUE, sep=";")
head(protein)
protein %>% mutate_each_(funs(numeric),protein$Confirmed)
protein %>% mutate_each(funs(numeric),protein$Confirmed)
protein %>% mutate(across(where(is.character()), as.numeric))
protein %>% as_tibble() %>% mutate(across(where(is.character()), as.numeric))
protein %>% as_tibble() %>% mutate(across(protein$Confirmed), as.numeric)
protein %>% mutate(across(protein$Confirmed), as.numeric)
protein %>% drop_na()
protein$Country
drop_na(protein)
protein$Country
#Creating group for basic stats
na.omit(protein)
protein$Country
protein %>% mutate(Confirmed,as.numeric())
mutate(protein$Confirmed,as.numeric())
View(protein)
countries$Turkey@fruits
# OWN CLASS
country <- setClass("country",
slots = list(cname = "character",
alcholic_beverages = "numeric",
animal_products = "numeric",
animal_fats = "numeric",
aquatic_products = "numeric",
cereals = "numeric",
eggs = "numeric",
fish = "numeric",
fruits = "numeric",
meat = "numeric",
milk = "numeric",
offals = "numeric",
oilcrops = "numeric",
pulses = "numeric",
spices = "numeric",
starchy = "numeric",
stimulants = "numeric",
sugar_crops = "numeric",
sugar_and_sweeteners = "numeric",
treenuts = "numeric",
vegetal = "numeric",
vegetable_oils = "numeric",
vegetables = "numeric",
miscellaneous = "numeric",
obesity = "numeric",
undernourished = "numeric",
confirmed = "numeric",
deaths = "numeric",
recovered = "numeric",
active = "numeric",
population = "numeric"))
#CLASS METHOD
setMethod(f = "show",
signature = "country",
definition = function(object) {
cat(object@cname, "\n")
cat("Number of Confirmed Cases:", object@confirmed*object@population, "\n")
cat("Number of Active Cases:", object@active*object@population, "\n")
cat("Number of Recovered Cases:", object@recovered*object@population, "\n")
}
)
#Creation of an empty list
countries <- list()
#EACH ROW IN THE DATASET WILL BECOME A COUNTRY OBJECT
#iterating over the dataset
for (row in 1:nrow(protein)) {
#creation of country objects for each row and appending them to the empty list initialized above
countries[as.character(protein$Country[row])] <- country(cname = as.character(protein$Country[row]),
alcholic_beverages = as.numeric(protein$Alcoholic.Beverages[row]),
animal_products = as.numeric(protein$Animal.Products[row]),
animal_fats = as.numeric(protein$Animal.fats[row]),
aquatic_products = as.numeric(protein$Aquatic.Products..Other[row]),
cereals = as.numeric(protein$Cereals...Excluding.Beer[row]),
eggs = as.numeric(protein$Eggs[row]),
fish = as.numeric(protein$Fish..Seafood[row]),
fruits = as.numeric(protein$Fruits...Excluding.Wine[row]),
meat = as.numeric(protein$Meat[row]),
milk = as.numeric(protein$Milk...Excluding.Butter[row]),
offals = as.numeric(protein$Offals[row]),
oilcrops = as.numeric(protein$Oilcrops[row]),
pulses = as.numeric(protein$Pulses[row]),
spices = as.numeric(protein$Spices[row]),
starchy = as.numeric(protein$Starchy.Roots[row]),
stimulants = as.numeric(protein$Stimulants[row]),
sugar_crops = as.numeric(protein$Sugar.Crops[row]),
sugar_and_sweeteners = as.numeric(protein$Sugar...Sweeteners[row]),
treenuts = as.numeric(protein$Treenuts[row]),
vegetal = as.numeric(protein$Vegetal.Products[row]),
vegetable_oils = as.numeric(protein$Vegetable.Oils[row]),
vegetables = as.numeric(protein$Vegetables[row]),
miscellaneous = as.numeric(protein$Miscellaneous[row]),
obesity = as.numeric(protein$Obesity[row]),
undernourished = as.numeric(protein$Undernourished[row]),
confirmed = as.numeric(protein$Confirmed[row]),
deaths = as.numeric(protein$Deaths[row]),
recovered = as.numeric(protein$Recovered[row]),
active = as.numeric(protein$Active[row]),
population = as.numeric(protein$Population[row]))
}
#As per seen below the object type is S4
typeof(countries$Poland)
#Here the S4 object automatically invokes the defined method
countries$Poland
#Here the object attribute is called
countries$Turkey@fruits
#Creating group for basic stats
data_num <- as.data.frame(apply(protein, 2, as.numeric))  # Convert all variable types to numeric
#Creating group for basic stats
protein <- as.data.frame(apply(protein, 2, as.numeric))  # Convert all variable types to numeric
#Creating group for basic stats
protein <- as.data.frame(apply(protein[:27,32], 2, as.numeric))  # Convert all variable types to numeric
#Creating group for basic stats
protein <- as.data.frame(apply(protein[27,32], 2, as.numeric))  # Convert all variable types to numeric
protein <- read.csv2("data/protein.csv", header=TRUE, sep=";")
head(protein)
protein <- as.data.frame(apply(protein["Confirmed","Deaths","Recovered","Active"], 2, as.numeric))  # Convert all variable types to numeric
#Creating group for basic stats
protein <- as.data.frame(apply(protein[c("Confirmed","Deaths","Recovered","Active")], 2, as.numeric))  # Convert all variable types to numeric
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(dplyr)
library(tidyverse)
library(DT)
library(shinythemes)
library(knitr)
library(flexdashboard)
library(plotly)
library(tidyverse)
library(dplyr)
library(ggplot2)
protein <- read.csv2("data/protein.csv", header=TRUE, sep=";")
head(protein)
protein <- read.csv2("data/protein.csv", header=TRUE, sep=";")
head(protein)
protein %>%  mutate((apply(protein[c("Confirmed","Deaths","Recovered","Active")], 2, as.numeric)))
mutate((apply(protein[c("Confirmed","Deaths","Recovered","Active")], 2, as.numeric)))
mutate((apply(protein[c("Confirmed","Deaths","Recovered","Active")], 2)),numeric)
mutate((apply(protein[c("Confirmed","Deaths","Recovered","Active")], 2)),FUN =as.numeric)
#Creating group for basic stats
apply(protein[c("Confirmed","Deaths","Recovered","Active")], 2, as.numeric)  # Convert all variable types to numeric
#Creating group for basic stats
protein %>% apply(protein[c("Confirmed","Deaths","Recovered","Active")], 2, as.numeric)  # Convert all variable types to numeric
#Creating group for basic stats
protein %>% apply(protein[c("Confirmed","Deaths","Recovered","Active")],  as.numeric)  # Convert all variable types to numeric
#Creating group for basic stats
col_to_bind <- as.data.frame(apply(protein[c("Confirmed","Deaths","Recovered","Active")],2,as.numeric))  # Convert all variable types to numeric
cbind.data.frame(protein,col_to_bind)
n <- cbind.data.frame(protein,col_to_bind)
View(n)
View(n)
n %>%
transmute("Number of Confirmed" = Population * Confirmed,
"Number of Active" = Population * Active,
"Number of Recovered" = Population * Recovered,
"Number of Deaths" = Population * Deaths)
n %>% select(-c(27:33))
n %>% select(-c(27:33)) %>% transmute("Number of Confirmed" = Population * Confirmed,
"Number of Active" = Population * Active,
"Number of Recovered" = Population * Recovered,
"Number of Deaths" = Population * Deaths)
n %>% select(-c(27:30)) %>% transmute("Number of Confirmed" = Population * Confirmed,
"Number of Active" = Population * Active,
"Number of Recovered" = Population * Recovered,
"Number of Deaths" = Population * Deaths)
new_pro <- n %>% select(-c(27:30)) %>% transmute("Number of Confirmed" = Population * Confirmed,
"Number of Active" = Population * Active,
"Number of Recovered" = Population * Recovered,
"Number of Deaths" = Population * Deaths)
View(new_pro)
View(new_pro)
select(n,-c(27:30)) %>% transmute("Number of Confirmed" = Population * Confirmed,
"Number of Active" = Population * Active,
"Number of Recovered" = Population * Recovered,
"Number of Deaths" = Population * Deaths)
View(n)
View(n)
new_num <- n %>% select(-c(27:30)) %>% transmute("Number of Confirmed" = Population * Confirmed,
"Number of Active" = Population * Active,
"Number of Recovered" = Population * Recovered,
"Number of Deaths" = Population * Deaths)
protein <-subset(protein, select = -c("Confirmed","Deaths","Recovered","Active"))
protein <-subset(protein, select = -c(Confirmed,Deaths,Recovered,Active))
protein <- read.csv2("data/protein.csv", header=TRUE, sep=";")
head(protein)
protein <-subset(protein, select = -c(Confirmed,Deaths,Recovered,Active,Unit..all.except.Population,X))
protein <-subset(protein, select = -c(Confirmed,Deaths,Recovered,Active,Unit..all.except.Population.,X))
protein <- read.csv2("data/protein.csv", header=TRUE, sep=";")
head(protein)
#Creating group for basic stats
col_to_bind <- as.data.frame(apply(protein[c("Confirmed","Deaths","Recovered","Active")],2,as.numeric))
col_to_bind <- as.data.frame(apply(protein[c("Confirmed","Deaths","Recovered","Active","Population")],2,as.numeric))
col_to_bind %>% transmute("Number of Confirmed" = Population * Confirmed,
"Number of Active" = Population * Active,
"Number of Recovered" = Population * Recovered,
"Number of Deaths" = Population * Deaths)
View(col_to_bind)
View(col_to_bind)
col_to_bind %>% transmute(NumberofConfirmed = Population * Confirmed)
View(col_to_bind)
View(col_to_bind)
nums<- col_to_bind %>% transmute("Number of Confirmed" = Population * Confirmed,
"Number of Active" = Population * Active,
"Number of Recovered" = Population * Recovered,
"Number of Deaths" = Population * Deaths)
View(nums)
View(nums)
protein <-subset(protein, select = -c(Confirmed,Deaths,Recovered,Active,Unit..all.except.Population.,X))
cbind(protein,nums)
protein <- cbind(protein,nums)
