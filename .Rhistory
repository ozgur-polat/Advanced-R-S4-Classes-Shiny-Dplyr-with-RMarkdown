}
plot_it("Eggs", "Alcoholic")
library(dplyr)
library(tidyverse)
library(DT)
library(shinythemes)
library(knitr)
library(flexdashboard)
library(plotly)
library(tidyverse)
library(dplyr)
library(ggplot2)
plot_it <- function(a, b){
ggplot(data = protein, aes(x = select(data,a), y = b)) +
geom_point(colour = "blue")
}
plot_it("Eggs", "Alcoholic")
plot_it <- function(a, b){
a2 <- select(data,a)
ggplot(data = protein, aes(x = a2, y = b)) +
geom_point(colour = "blue")
}
plot_it("Eggs", "Alcoholic")
plot_it <- function(a, b){
a2 <- select(protein,a)
ggplot(data = protein, aes(x = a2, y = b)) +
geom_point(colour = "blue")
}
plot_it("Eggs", "Alcoholic")
knitr::opts_chunk$set(echo = TRUE)
avocado <- read_csv("avocado.csv")
typeof(avocado)
ui <- fluidPage(
theme = shinythemes::shinytheme('simplex'),
titlePanel("Avocado"),
)
library(shiny)
library(dplyr)
library(tidyverse)
library(DT)
library(shinythemes)
library(knitr)
library(flexdashboard)
library(plotly)
library(tidyverse)
library(dplyr)
library(ggplot2)
ui <- fluidPage(
theme = shinythemes::shinytheme('simplex'),
titlePanel("Avocado"),
)
server <- function(input, output, session){
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinythemes::shinytheme('simplex'),
titlePanel("Avocado"),
sidebarLayout(
sidebarPanel(
selectInput('region', 'Select Region', unique(avocado$region)),
sliderInput('year', 'Select Year', min=2015, max=2018, value = 2015, step = 1),
),
mainPanel(
tabsetPanel(
tabPanel("Table", DT::DTOutput('table'))
),
)
)
)
server <- function(input, output, session){
output$table <- DT::renderDT({
avocado %>%
filter(year == input$year) %>%
filter(region == input$region) %>%
select(-X1)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinythemes::shinytheme('simplex'),
titlePanel("Avocado"),
sidebarLayout(
sidebarPanel(
selectInput('region', 'Select Region', unique(avocado$region)),
sliderInput('year', 'Select Year', min=2015, max=2018, value = 2015, step = 1),
actionButton("mean_button", "Calculate"),
actionButton("show_help", "Help")
),
mainPanel(
tabsetPanel(
tabPanel("Plot", plotlyOutput('plot')),
tabPanel("Histogram", plotlyOutput('histogram')),
tabPanel("Summary", code("Please choose necessary inputs and click 'Calculate' button."),
textOutput("test1"), textOutput("test2"), textOutput("test3"))
),
)
)
)
server <- function(input, output, session){
observeEvent(input$show_help, {
help_text1 = "'Calculate' button helps for finding some basic summary values of average price  for
region and year that you choose. In plot part shows a total number of bags againtst total volume and
Histogram part shows a graphical display of average prices of avocado using bars of different heights. Lastly,
summary shows descriptive statisics of the avocado data: average price, mean, variance, maximum and minimum."
showModal(modalDialog(help_text1))
})
info_button1 <- eventReactive(input$mean_button, {
data2 <- avocado %>%
filter(year == input$year) %>%
filter(region == input$region)
summarise(data2, mean(AveragePrice))
})
info_button2 <- eventReactive(input$mean_button, {
data3 <- avocado %>%
filter(year == input$year) %>%
filter(region == input$region)
summarise(data3, var(AveragePrice))
})
info_button3 <- eventReactive(input$mean_button, {
data3 <- avocado %>%
filter(year == input$year) %>%
filter(region == input$region)
summarise(data3, max(AveragePrice))
})
info_button4 <- eventReactive(input$mean_button, {
data3 <- avocado %>%
filter(year == input$year) %>%
filter(region == input$region)
summarise(data3, min(AveragePrice))
})
output$test1 <- renderText({
info1 <- info_button1()
isolate(
paste("Average Price mean for", input$region, "is", info1, "in", input$year,".")
)
})
output$test2 <- renderText({
info2 <- info_button2()
isolate(
paste("Average Price variance for", input$region, "is", info2, "in", input$year,".")
)
})
output$test3 <- renderText({
info3 <- info_button3()
info4 <- info_button4()
isolate(
paste("Maximum and minimum Average Price values are", info3, "and", info4, "for", input$region, "in", input$year,",","respectively",".")
)
})
output$plot <- renderPlotly({
data <- avocado  %>%
filter(year == input$year) %>%
filter(region == input$region)
print(data)
myplot <- ggplot(data, aes(x = `Total Bags`, y = `Total Volume`, color= `Total Volume`)) +
geom_point()
ggplotly(myplot)
})
output$histogram <-renderPlotly({
data2 <- avocado %>%
filter(year == input$year) %>%
filter(region == input$region)
print(data)
myplot2 <- ggplot(data2, aes(x=AveragePrice, fill = region, color = region)) +
geom_histogram(position="identity", binwidth = 0.05)
ggplotly(myplot2)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = shinythemes::shinytheme('simplex'),
titlePanel("Protein Shake"),
sidebarLayout(
sidebarPanel(
selectInput("First-Variable", "Select First Variable", colnames(protein)),
selectInput("Second-Variable", "Select Second Variable", colnames(protein))
#a <-selectInput('Country', 'Select a Country', unique(protein$Country)),
#b <- select('Nutrition', 'Select Nutririon Type', colnames(protein[,-1])),
),
mainPanel(
tabsetPanel(
#tabPanel("Table", DT::DTOutput('table'))
),
)
)
)
server <- function(input, output, session){
}
shinyApp(ui = ui, server = server)
install.packages(c("brant", "generalhoslem", "LogisticDx", "oglmx", "ordinal", "pscl", "texreg", "ucminf", "VGAM"))
knitr::opts_chunk$set(echo = TRUE)
ologit = polr(as.factor(overall_satisfaction)~reviews+accommodates+bedrooms+price+roomtype, data=warsaw, method = "logistic")
knitr::opts_chunk$set(echo = TRUE)
install.packages("pscl", repos = "http://cran.us.r-project.org")
install.packages("ucminf")
install.packages("ordinal")
install.packages("reshape")
install.packages("generalhoslem")
install.packages("oglmx")
install.packages("brant")
install.packages("VGAM")
?polr
ologit = polr(as.factor(overall_satisfaction)~reviews+accommodates+bedrooms+price+roomtype, data=warsaw)
library("sandwich")
library("zoo")
library("lmtest")
library("MASS")
library("pscl")
library("LogisticDx")
library("ucminf")
library("ordinal")
library("reshape")
library("generalhoslem")
library("oglmx")
library("aod")
library("brant")
library("VGAM")
library("stargazer")
library("texreg")
ologit = polr(as.factor(overall_satisfaction)~reviews+accommodates+bedrooms+price+roomtype, data=warsaw)
data <-read.csv("warsaw.csv", header=T, sep=",", dec="." )
data <-read.csv("data/warsaw.csv", header=T, sep=",", dec="." )
ologit = polr(as.factor(overall_satisfaction)~reviews+accommodates+bedrooms+price+roomtype, data=warsaw)
warsaw <- data[,c(3:4,9:12,14)]
str(warsaw)
sum(is.na(warsaw))
warsaw <- subset(warsaw, warsaw$overall_satisfaction != 0 &
warsaw$overall_satisfaction != 2.5 &
warsaw$overall_satisfaction != 3 &
warsaw$overall_satisfaction != 3.5)
table(warsaw$overall_satisfaction)
warsaw$roomtype = rep(0, 2538)
warsaw$roomtype[warsaw$room_type =="Entire home/apt"] = 1
warsaw$roomtype[warsaw$room_type =="Private room"] = 2
warsaw$roomtype[warsaw$room_type =="Shared room"] = 3
warsaw$roomtype <- as.factor(warsaw$roomtype)
ologit = polr(as.factor(overall_satisfaction)~reviews+accommodates+bedrooms+price+roomtype, data=warsaw)
ologit.restricted = polr(as.factor(overall_satisfaction)-1, data=warsaw)
warsaw$overall_satisfaction
a <- as.factor(warsaw$overall_satisfaction)
a
ologit.restricted = polr(a-1, data=warsaw)
ologit.restricted = polr(as.factor(overall_satisfaction)~1, data=warsaw)
anova(ologit, ologit.restricted )
brant(ologit)
lipsitz.test(ologit)
ologit = polr(as.factor(overall_satisfaction)~reviews+accommodates+bedrooms+price+roomtype, data=warsaw)
ologit.restricted = polr(as.factor(overall_satisfaction)~1, data=warsaw)
anova(ologit, ologit.restricted )
lipsitz.test(ologit)
data <-read.csv("data/warsaw.csv", header=T, sep=",", dec="." )
warsaw <- data[,c(3:4,9:12,14)]
sum(is.na(warsaw))
ologit = polr(as.factor(overall_satisfaction)~reviews+accommodates+bedrooms+price+roomtype, data=warsaw)
ologit = polr(as.factor(overall_satisfaction)~reviews+accommodates+bedrooms+price+room_type, data=warsaw)
ologit.restricted = polr(as.factor(overall_satisfaction)~1, data=warsaw)
anova(ologit, ologit.restricted )
warsaw <- subset(warsaw, warsaw$overall_satisfaction != 0 &
warsaw$overall_satisfaction != 2.5 &
warsaw$overall_satisfaction != 3 &
warsaw$overall_satisfaction != 3.5)
ologit = polr(as.factor(overall_satisfaction)~reviews+accommodates+bedrooms+price+room_type, data=warsaw)
ologit.restricted = polr(as.factor(overall_satisfaction)~1, data=warsaw)
anova(ologit, ologit.restricted )
warsaw <- data[,c(3:4,9:12,14)]
ologit = polr(as.factor(overall_satisfaction)~reviews+accommodates+bedrooms+price+room_type, data=warsaw)
ologit.restricted = polr(as.factor(overall_satisfaction)~1, data=warsaw)
anova(ologit, ologit.restricted )
sum(is.na(warsaw))
warsaw$overall_satisfaction[warsaw$overall_satisfaction ==0] = 1
warsaw$overall_satisfaction[warsaw$overall_satisfaction ==2.5] = 2
warsaw$overall_satisfaction[warsaw$overall_satisfaction ==3] = 3
warsaw$overall_satisfaction[warsaw$overall_satisfaction ==3.5] = 4
warsaw$overall_satisfaction[warsaw$overall_satisfaction ==4] = 5
warsaw$overall_satisfaction[warsaw$overall_satisfaction ==4.5] = 6
warsaw$overall_satisfaction[warsaw$overall_satisfaction ==5] = 7
ologit = polr(as.factor(overall_satisfaction)~reviews+accommodates+bedrooms+price+room_type, data=warsaw)
ologit.restricted = polr(as.factor(overall_satisfaction)~1, data=warsaw)
anova(ologit, ologit.restricted )
sum(is.na(warsaw$reviews))
sum(is.na(warsaw$accomodates))
sum(is.na(warsaw$bedrooms))
sum(is.na(warsaw$price))
sum(is.na(warsaw$room_type))
sum(is.na(warsaw$overall_satisfaction))
sum(is.na(warsaw))
na.omit(warsaw)
na.omit(warsaw)
ologit = polr(as.factor(overall_satisfaction)~reviews+accommodates+bedrooms+price+room_type, data=warsaw)
sum(is.na(warsaw))
warsaw <- data[,c(3:4,9:12,14)]
ologit = polr(as.factor(overall_satisfaction)~reviews+accommodates+bedrooms+price+room_type, data=warsaw)
ologit.restricted = polr(as.factor(overall_satisfaction)~1, data=warsaw)
anova(ologit, ologit.restricted )
warsaw <- subset(warsaw, warsaw$overall_satisfaction != 0 &
warsaw$overall_satisfaction != 2.5 &
warsaw$overall_satisfaction != 3 &
warsaw$overall_satisfaction != 3.5)
ologit = polr(as.factor(overall_satisfaction)~reviews+accommodates+bedrooms+price+room_type, data=warsaw)
ologit.restricted = polr(as.factor(overall_satisfaction)~1, data=warsaw)
anova(ologit, ologit.restricted )
lipsitz.test(ologit)
data <-read.csv("data/warsaw.csv", header=T, sep=",", dec="." )
warsaw <- data[,c(3:4,9:12,14)]
str(warsaw)
sum(is.na(warsaw))
table(warsaw$overall_satisfaction)
table(warsaw$room_type)
warsaw$overall_satisfaction[warsaw$overall_satisfaction ==0] = 1
warsaw$overall_satisfaction[warsaw$overall_satisfaction ==2.5] = 2
warsaw$overall_satisfaction[warsaw$overall_satisfaction ==3] = 3
warsaw$overall_satisfaction[warsaw$overall_satisfaction ==3.5] = 4
warsaw$overall_satisfaction[warsaw$overall_satisfaction ==4] = 5
warsaw$overall_satisfaction[warsaw$overall_satisfaction ==4.5] = 6
warsaw$overall_satisfaction[warsaw$overall_satisfaction ==5] = 7
warsaw$price = log(warsaw$price)
warsaw <- subset(warsaw, warsaw$overall_satisfaction != 0 &
warsaw$overall_satisfaction != 2.5 &
warsaw$overall_satisfaction != 3 &
warsaw$overall_satisfaction != 3.5)
table(warsaw$overall_satisfaction)
warsaw$roomtype = rep(0, 2538)
warsaw$roomtype = rep(0, 4590)
warsaw$roomtype[warsaw$room_type =="Entire home/apt"] = 1
warsaw$roomtype[warsaw$room_type =="Private room"] = 2
warsaw$roomtype[warsaw$room_type =="Shared room"] = 3
warsaw$roomtype <- as.factor(warsaw$roomtype)
ologit = polr(as.factor(overall_satisfaction)~reviews+accommodates+bedrooms+price+roomtype, data=warsaw)
ologit = polr(as.factor(overall_satisfaction)~reviews+accommodates+bedrooms+price+roomtype, data=warsaw)
data <-read.csv("data/test.csv", header=T, sep=",", dec="." )
data <-read.csv("data/student.csv", header=T, sep=",", dec="." )
ologit = polr(as.factor(difficulty)~nb.repeat+Q1+Q2+Q3+Q4+instr+class+attendance, data=data, method = "logistic")
summary(ologit)
ologit = polr(as.factor(difficulty)~nb.repeat+Q1+Q2+Q3+Q4+Q5+Q6+Q7+Q8+Q9+Q10+instr+class+attendance, data=data, method = "logistic")
summary(ologit)
coeftest(ologit)
summary(ologit)
coeftest(ologit)
ologit = polr(as.factor(difficulty)~nb.repeat+Q1+Q2+Q3+Q4+Q5+Q6+Q7+Q8+Q9+Q10+Q11+Q12+Q13+Q14+Q15+Q16+Q17+Q18+Q19+Q20+Q21+Q22+Q23+Q24+Q25+Q26+Q27+Q28+instr+class+attendance, data=data, method = "logistic")
summary(ologit)
coeftest(ologit)
oprobit = polr(as.factor(difficulty)~nb.repeat+Q1+Q2+Q3+Q4+Q5+Q6+Q7+Q8+Q9+Q10+Q11+Q12+Q13+Q14+Q15+Q16+Q17+Q18+Q19+Q20+Q21+Q22+Q23+Q24+Q25+Q26+Q27+Q28+instr+class+attendance, data=data, method = "probit")
summary(oprobit)
coeftest(oprobit)
brant(ologit)
brant(oprobit)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(dplyr)
library(tidyverse)
library(DT)
library(shinythemes)
library(knitr)
library(flexdashboard)
library(plotly)
library(tidyverse)
library(dplyr)
library(ggplot2)
protein <- read.csv("data/protein.csv")
typeof(protein)
ahmet <- as.data.frame(protein)
typeof(ahmet)
plot_it <- function(a, b, plot_type){
a2 <- select(protein,a)
ggplot(data = protein, aes(x = a2, y = b)) +
geom_point(colour = "blue")
}
plot_it("Eggs", "Alcoholic")
typeof(protein)
ahmet <- as.data.frame(protein)
typeof(ahmet)
plot_it <- function(a, b){
a2 <- select(protein,a)
ggplot(data = protein, aes(x = a2, y = b)) +
geom_point(colour = "blue")
}
plot_it("Eggs", "Alcoholic")
typeof(protein)
ahmet <- as.data.frame(protein)
typeof(ahmet)
plot_it <- function(a, b){
ggplot(data = protein, aes(x = a2, y = b)) +
geom_point(colour = "blue")
}
plot_it("Eggs", "Alcoholic")
typeof(protein)
ahmet <- as.data.frame(protein)
typeof(ahmet)
plot_it <- function(a, b){
ggplot(data = protein, aes(x = a, y = b)) +
geom_point(colour = "blue")
}
plot_it("Eggs", "Alcoholic")
typeof(protein)
ahmet <- as.data.frame(protein)
typeof(ahmet)
plot_it <- function(a, b){
ggplot(data = protein, aes(x = a, y = b)) +
geom_point(colour = "blue")
}
plot_it("Eggs", "Alcoholic")
plot_it("Country", "Alcoholic")
typeof(protein)
ahmet <- as.data.frame(protein)
typeof(ahmet)
plot_it <- function(a, b){
ggplot(data = protein, aes(x = a, y = b)) +
geom_point(colour = "blue")
}
plot_it("Confirmed", "Alcoholic")
protein <- read.csv("data/protein.csv")
typeof(protein)
ahmet <- as.data.frame(protein)
typeof(ahmet)
protein <- read.csv2("data/protein.csv")
plot_it <- function(a, b){
ggplot(data = protein, aes(x = a, y = b)) +
geom_point(colour = "blue")
}
plot_it("Confirmed", "Alcoholic")
typeof(protein)
head(protein)
summary(protein)
protein <- read.csv2("data/protein.csv" header=TRUE seperator=",")
protein <- read.csv2("data/protein.csv", header=TRUE, seperator=",")
protein <- read.csv2("data/protein.csv", header=TRUE, sep=",")
summary(protein)
head(protein)
typeof(protein)
ahmet <- as.data.frame(protein)
typeof(ahmet)
plot_it <- function(a, b){
ggplot(data = protein, aes(x = a, y = b)) +
geom_point(colour = "blue")
}
plot_it("Confirmed", "Alcoholic")
plot_it <- function(a, b){
a2 <- select(protein,a)
ggplot(data = protein, aes(x = a2, y = b)) +
geom_point(colour = "blue")
}
plot_it("Confirmed", "Alcoholic")
plot_it <- function(a, b){
myplot <- ggplot(protein, aes(x = a, y = b)) +
geom_point()
ggplotly(myplot)
#a2 <- select(protein,a)
#ggplot(data = protein, aes(x = a2, y = b)) +
#geom_point(colour = "blue")
}
plot_it("Confirmed", "Alcoholic")
ui <- fluidPage(
theme = shinythemes::shinytheme('simplex'),
titlePanel("Protein Shake"),
sidebarLayout(
sidebarPanel(
selectInput("first", "Select Country", unique(protein$Country)),
selectInput("Second", "Select Column", unique(protein$Deaths))
#a <-selectInput('Country', 'Select a Country', unique(protein$Country)),
#b <- select('Nutrition', 'Select Nutririon Type', colnames(protein[,-1])),
),
mainPanel(
tabsetPanel(
tabPanel("Table", DT::DTOutput('graph'))
),
)
)
)
server <- function(input, output, session){
output$graph <- DT::renderDT({
data <- protein  %>%
filter(Country == input$first) %>%
filter(Deaths == input$second)
plot_it(data,"Confirmed", "Alcoholic")
})
}
shinyApp(ui = ui, server = server)
client <- function(fname, lname, age, gender, married) {
new_object <- list(fname = fname,
lname = lname,
age = age,
gender = gender,
married = married)
# it is convenient to assign a class
# attribute by calling the structure function
structure(new_object, class = "client")
}
k2 <- client("Joan",
"Warren",
24,
"F",
FALSE)
print(k2)
mean.client <- function(x) x$age
mean(k)
library(pryr)
setClass("client4",
slots = list(fname = "character",
lname = "character",
age = "numeric",
gender = "character",
married = "logical"))
k4 <- new(Class = "client4",
fname = "John",
lname = "Smith",
age = 35,
gender = "M",
married = TRUE)
otype(k4)
isS4(k4)
isS4(data.frame(x = 1))
getClass("client4")
